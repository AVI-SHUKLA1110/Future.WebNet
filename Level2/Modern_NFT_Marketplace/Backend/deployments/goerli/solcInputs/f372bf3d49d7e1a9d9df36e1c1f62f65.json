{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NFT_Marketplace.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror NFT_Marketplace_Need_Amount_More_Than_Zero();\nerror NFT_Marketplace_NFT_IS_NOT_APPROVED_TO_MARKETPLACE();\nerror NFT_Marketplace_Already_Listed();\nerror NFT_Marketplace_Not_Owner();\nerror NFT_Marketplace_Not_Listed(address nftAddress,uint256 tokenId);\nerror NFT_Marketplace_Insufficient_Balance(address nftAddress, uint256 tokenId);\nerror NFT_Marketplace_Update_Price_GreaterThanZero(address nftAddress,uint256 tokenId,uint256 price);\nerror NFT_Marketplace_Transfer_Failed();\nerror  NFT_Marketplace_No_Proceeds(address seller,address nft_address,uint256 token_id,uint256 proceeds);\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\ncontract NFT_Marketplace is ReentrancyGuard {\n\n//Events\nevent itemListed(address indexed seller, address indexed nftAddress, uint256 indexed tokenId,uint256 Price);\nevent itemBought(address indexed buyer,address indexed nftAddress, uint256 indexed tokenId,uint256 price);\nevent itemRemoved(address indexed owner,address indexed nftAddress,uint256 indexed tokenId);\n\nstruct Listing{\nuint256 price;\naddress seller;\n}\n// NFT Address -> token_id -> Listing (price, seller)\nmapping(address => mapping(uint256 => Listing)) private s_listings;\n\n// Owner's Address -> Withdrawable balance of the owner \nmapping(address => uint256) private s_proceeds;\n\n// Modifiers\n\nmodifier notListed(address nftAddress,uint256 tokenId,address owner) {\nListing memory listing = s_listings[nftAddress][tokenId];\nif(listing.price != 0){\n    revert NFT_Marketplace_Already_Listed();\n}\n_;\n}\n\nmodifier isOwner(address nftAddress,uint256 tokenId,address spender) {\nIERC721 nft = IERC721(nftAddress);\naddress owner  = nft.ownerOf(tokenId);\nif(owner != spender){\n    revert NFT_Marketplace_Not_Owner();\n}\n_;\n}\n\nmodifier isListed(address nftAddress,uint256 tokenId){\nListing memory listing = s_listings[nftAddress][tokenId];\nif (listing.price <= 0) {\n    revert NFT_Marketplace_Not_Listed(nftAddress,tokenId);\n}\n_;\n}\n\n\n// Main Functions\n\nfunction list_item(address nft_address,uint256 token_id, uint256 price) external notListed(nft_address,token_id,msg.sender) isOwner(nft_address,token_id, msg.sender) {\nif(price <=0){\n    revert NFT_Marketplace_Need_Amount_More_Than_Zero();\n}\n\nIERC721 nft = IERC721(nft_address);\n\nif(nft.getApproved(token_id) != address(this)){\nrevert NFT_Marketplace_NFT_IS_NOT_APPROVED_TO_MARKETPLACE();\n}\n\ns_listings[nft_address][token_id] = Listing(price,msg.sender);\nemit itemListed(msg.sender,nft_address,token_id,price);\n\n}\n\n\nfunction buyItem(address nft_address,uint256 token_id) external payable isListed(nft_address,token_id)\nnonReentrant\n{\nListing memory listing = s_listings[nft_address][token_id];\n\n// Transfering NFT To The Buyer From The Seller\nif(msg.value < listing.price){\n    revert NFT_Marketplace_Insufficient_Balance(nft_address,token_id);\n}\ns_proceeds[listing.seller] = s_proceeds[listing.seller] + msg.value;\ndelete (s_listings[nft_address][token_id]);\nIERC721(nft_address).safeTransferFrom(listing.seller,msg.sender,token_id);\nemit itemBought(listing.seller,nft_address,token_id,listing.price);\n\n}\n\n\nfunction cancel_listing(address nft_address,uint256 token_id) external  isOwner(nft_address,token_id,msg.sender) isListed(nft_address,token_id){\ndelete (s_listings[nft_address][token_id]);\nemit itemRemoved(msg.sender,nft_address,token_id);\n}\n\nfunction update_listing(address nft_address,uint256 token_id,uint256 new_price) isOwner(nft_address,token_id,msg.sender) isListed(nft_address,token_id) external {\nif(new_price <= 0){\n    revert NFT_Marketplace_Update_Price_GreaterThanZero(nft_address,token_id,new_price);\n}\ns_listings[nft_address][token_id].price = new_price;\nemit itemListed(msg.sender,nft_address,token_id,new_price);\n}\n\n\nfunction withdraw(address nft_address,uint256 token_id) isOwner(nft_address,token_id,msg.sender) external {\n    uint256 proceeds = s_proceeds[msg.sender];\n    if(proceeds <=0){\n        revert NFT_Marketplace_No_Proceeds(msg.sender,nft_address,token_id,proceeds);\n    }\ns_proceeds[msg.sender] = 0;\n(bool success,) = payable(msg.sender).call{value:proceeds}(\"\");\n\nif(!success){\n    revert NFT_Marketplace_Transfer_Failed();\n}\n\n}\n\n// Getter Functions\n\nfunction getListings(address nft_address,uint256 token_id) external view returns(Listing memory) {\nreturn s_listings[nft_address][token_id];\n}\n\n\nfunction getProceeds(address seller) external view returns(uint256){\nreturn s_proceeds[seller];\n}\n\n// list_item ☑️\n// update_price ☑️\n// cancel_listing ☑️\n// withdraw processing ☑️\n// buy_item ☑️\n\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}